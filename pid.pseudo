// copyright John Emil Petersen III, 2019-2021... This particular file and its associated PID algorithm is for demonstrative purposes to the public only, 
// and is not permitted to be used in commercial applications without expressed written permission of John Emil Petersen III
// The following is a C/C++ algorithm for a closed PID control loop utilizing incremental encoders and DC motors
// In some places, actual code is removed and replaced by pseudo code, indicated by the prefix Pseudo

PID::PID(float kp, float ki, float kd, int axis)
{
	// P, I, and D parameters 
    KP = kp;
    KI = ki;
    KD = kd;
    axisID = axis;
    gettimeofday(&newTime, NULL);
    oldTime = newTime;

    datetime dtime = // Pseudo - put time into appropriate format struct

    // Pseudo - convert RA and DEC coordinates into Alt and Az coordinates

    timeInterval = 10;
}

double PID::returnPID(float kp, float ki, float kd, int axis)
{
    gettimeofday(&newTime, NULL);

    double timeChange = (double)(newTime.tv_usec - oldTime.tv_usec) / 1e6; // convert time change between encoder ticks from microseconds to decimal seconds

    if(axis == 0)
    {
        double error = targetAz - angleAz;
    }
    else double error = targetAlt - angleAlt;

    // below is the actual algorithm
    if(sameSign(error, lastError))
        errSumAz += (error * timeChange);
    double dErr = (error - lastError) / timeChange;
    double output = (kp * error) + (ki * errSumAz) + (kd * dErr);

    if(output > 0)
        output -= std::abs(((output - oldOutput)*timeChange)/200); // divide by 200 for purposes of damping
    else if(output < 0)
        output += std::abs(((output - oldOutput)*timeChange)/200);

    if(!sameSign(output, oldOutput)) // upon change of direction, do not update motor
        output = 0;
    report();
    lastError = error;
    oldTime = newTime;
    oldOutput = output;
    return output;

}

// check signs of two input doubles
bool PID::sameSign(double d1, double d2)
{
    if(d1*d2 >= 0)
        return true;
    else return false;
}

// break a time format which is a string into appropriate variables of a struct
PID::datetime PID::getTime(std::string str)
{
    datetime dt;
    dt.year = stoi(str.substr(0,4));
    dt.month = stoi(str.substr(4,2));
    dt.day = stoi(str.substr(6,2));
    dt.hour = stoi(str.substr(9,2));
    dt.minute = stoi(str.substr(11,2));
    dt.second = stod(str.substr(13,2));
    dt.fraction = stod(str.substr(16,8));
    return dt;
}

//determine which direction to turn the mount given arbitrary input
bool PID::turnForward(int axis)
{
    double diff;
    if(axis == 0)
    {
        if(angleAz < 0)
            angleAz += 2 * 3.141592654;
        diff = targetAz - angleAz;
    }
    else
    {
        if(angleAlt < 0)
            angleAlt += 2 * 3.141592654;
        diff = targetAlt - angleAlt;
    }
     if(diff < 0)
         diff += 2 * 3.141592654;
     if(diff > 3.141592654)
          return false;
     else
          return true;
}

// clamp the Alt axis such that the mounted telescope tube never achieves an angle exceeding verticle orientation
double PID::clampAlt(double zen)
{
    double alt = (3.141592654/2) - zen;

    if (alt < 0)
    {
        return 0;
    }
    else if (alt > 3.141592654 / 2)
        return 3.141592654 - alt;
    else return alt;
}

//route the output of the PID algorithm to this pulse width modulated DC motor control method
void PID::motorControl(double speed, int axis, int motorLead1, int motorLead2, bool forward)
{
    double difference;

    if(tracking)
    {
        difference = speed/pwmRange;

        if (difference < 0)
        {
            difference = -difference;
        }

        if(difference > 1)
            difference = 1;

    }

    else difference = speed / pwmRange;

    if(!forward)
    {
        // if sign indicates a particular direction, reset the pulse width modulation details including frequency and range
    }
    else
    {
	// if sign indicates the opposite direction from above, reset the pulse width modulation details including frequency and range
    }

}

// determine direction to turn the motor
bool PID::whichDirection(double increment)
{
    if(increment >= 0)
        return true;
    else return false;
}

void PID::run()
{
    while(programRunning)
    {
        double output;

        if(tracking)
        {
	    datetime dtime = // Pseudo - put time into appropriate format struct

	    // Pseudo - convert RA and DEC coordinates into Alt and Az coordinates

            targetAlt = clampAlt(targetZen); // take the returned zenith angle and convert it to Altitude coordinate

            bool dir = turnForward(axisID);  // determine which direction to turn the mount

            output = returnPID(KP, KI, KD, axisID);  

	    // control the motors appropriately, according to the PID output
            if(axisID == 0)
                motorControl(std::abs(output), axisID, pinRotateA, pinRotateB, dir);
            else if(axisID == 1)
                motorControl(std::abs(output), axisID, pinInclineA, pinInclineB, dir);


        }
        else
        {
            if(axisID == 0)
                motorControl(std::abs(AzInc), 0, pinRotateA, pinRotateB, whichDirection(AzInc));
            else if(axisID == 1)
                motorControl(std::abs(AltInc), 1, pinInclineA, pinInclineB, whichDirection(AltInc));
        }

	// Pseudo - sleep the while loop for set number of milliseconds
    }
    stopAxis(axisID); // Pseudo - stop motor when programRunning becomes false
}
